name: 'Terraform Single-Branch Workflow'

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy (staging or production)'
        required: true
        default: 'staging'
      action:
        description: 'Action to perform (Terraform_apply or Terraform_destroy)'
        required: true
        default: 'Terraform_apply'

permissions:
  contents: write

jobs:
  terraform:
    name: 'Terraform Workflow'
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    steps:
      # Step 1: Checkout the repository
      - name: Checkout
        uses: actions/checkout@v4

      # Step 2: Set AWS credentials based on the environment
      - name: Set AWS credentials
        run: |
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "AWS_DEFAULT_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV
      # Step 3: Initialize Terraform
      - name: Terraform Init
        run: terraform init

      # Step 4: Check Terraform formatting
      - name: Terraform Format Check
        run: terraform fmt -check

      # Step 5: Terraform Validation
      - name: Terraform Validation
        run: terraform validate

      # Step 6: Generate Terraform Plan
      - name: Terraform Plan
        run: terraform plan -input=false -out=plan-${{ github.event.inputs.environment }}.tfplan

      # Step 7: Manual Approval for Production
      - name: Await Manual Approval
        if: ${{ github.event.inputs.environment == 'production' }}
        uses: softprops/turnstyle@v1
        with:
          poll-interval-seconds: 30        # Check every 30 seconds
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 8: Apply Terraform Changes
      - name: Terraform Apply
        if: ${{ github.event.inputs.action == 'Terraform_apply' }}
        run: terraform apply -auto-approve plan-${{ github.event.inputs.environment }}.tfplan

      # Step 9: Destroy Terraform Resources (only if action is Terraform_destroy)
      - name: Terraform Destroy
        if: ${{ github.event.inputs.action == 'Terraform_destroy' }}
        run: terraform destroy -auto-approve

      # Step 10: Notify Success
      - name: Send Notificaton
        if: success()
        run: |
          aws sns publish --topic-arn ${{ secrets.SNS_TOPIC_ARN }} \
            --message "Terraform Apply succeeded for ${{ github.event.inputs.environment }} environment!" \
            --subject "Terraform Apply Success"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}