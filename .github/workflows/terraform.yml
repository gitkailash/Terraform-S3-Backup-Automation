name: 'Terraform Workflow'

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy (staging or production)'
        required: true
        default: 'staging'
      action:
        description: 'Action to perform (Terraform_apply or Terraform_destroy)'
        required: true
        default: 'Terraform_apply'

permissions:
  contents: write

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

jobs:
  checkout:
    name: 'Checkout Repository'
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Upload the files after checkout
      - name: Upload Terraform Files
        uses: actions/upload-artifact@v3
        with:
          name: terraform-files
          path: ./  # This uploads the entire repository contents

  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    needs: checkout

    steps:
      # Download the files from the previous job
      - name: Download Terraform Files
        uses: actions/download-artifact@v3
        with:
          name: terraform-files

      # Step 2: Terraform Initialization
      - name: Terraform Init
        run: terraform init

      # Step 3: Check Terraform formatting
      - name: Terraform Format Check
        run: terraform fmt -check

      # Step 4: Terraform Validation
      - name: Terraform Validate
        run: terraform validate

      # Step 5: Generate Terraform Plan
      - name: Terraform Plan
        run: terraform plan -out=plan-${{ github.event.inputs.environment }}.tfplan

      # Step 6: Manual Approval for Production
      - name: Await Manual Approval
        if: ${{ github.event.inputs.environment == 'production' }}
        uses: softprops/turnstyle@v1
        with:
          poll-interval-seconds: 30        # Check every 30 seconds
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 7: Apply Terraform Changes
      - name: Terraform Apply
        if: ${{ github.event.inputs.action == 'Terraform_apply' }}
        run: terraform apply -auto-approve plan-${{ github.event.inputs.environment }}.tfplan

      # Step 8: Destroy Terraform Resources (only if action is Terraform_destroy)
      - name: Terraform Destroy
        if: ${{ github.event.inputs.action == 'Terraform_destroy' }}
        run: terraform destroy -auto-approve

  notify_success:
    name: 'Send Notification'
    runs-on: ubuntu-latest
    needs: terraform
    if: success()

    steps:
      # Step 9: Notify Success
      - name: Send Notification
        run: |
          if [[ "${{ github.event.inputs.action }}" == "Terraform_apply" ]]; then
            aws sns publish --topic-arn ${{ secrets.SNS_TOPIC_ARN }} \
              --message "Terraform Apply succeeded for ${{ github.event.inputs.environment }} environment!" \
              --subject "Terraform Apply Success"
          elif [[ "${{ github.event.inputs.action }}" == "Terraform_destroy" ]]; then
            aws sns publish --topic-arn ${{ secrets.SNS_TOPIC_ARN }} \
              --message "Terraform Destroy succeeded for ${{ github.event.inputs.environment }} environment!" \
              --subject "Terraform Destroy Success"
          fi
