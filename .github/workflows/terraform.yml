name: 'Terraform Single-Branch Workflow'

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy (staging or production)'
        required: true
        default: 'staging'
      action:
        description: 'Action to perform (Terraform_apply or Terraform_destroy)'
        required: true
        default: 'Terraform_apply'

permissions:
  contents: write

jobs:
  plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout
        uses: actions/checkout@v4

      # Step 2: Initialize Terraform
      - name: Terraform Init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
        run: terraform init

      # Step 3: Check Terraform formatting
      - name: Terraform Format Check
        run: terraform fmt -check

      # Step 4: Terraform Validation
      - name: Terraform Validation
        run: terraform validate

      # Step 5: Generate Terraform Plan
      - name: Generate Terraform Plan
        run: terraform plan -input=false -out=plan-${{ github.event.inputs.environment }}.tfplan

      # Step 6: Upload Plan File for Other Jobs
      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v3
        with:
          name: terraform-plan
          path: plan-${{ github.event.inputs.environment }}.tfplan

  apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    needs: plan

    steps:
      # Step 1: Manual Approval
      - name: Await Manual Approval
        if: ${{ github.event.inputs.environment == 'production' }}
        uses: softprops/turnstyle@v1
        with:
          poll-interval-seconds: 30
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 2: Download Plan File
      - name: Download Terraform Plan
        uses: actions/download-artifact@v3
        with:
          name: terraform-plan

      # Step 3: Terraform Apply
      - name: Apply Terraform Plan
        if: ${{ github.event.inputs.action == 'Terraform_apply' }}
        run: terraform apply -auto-approve plan-${{ github.event.inputs.environment }}.tfplan

      # Step 4: Notify Success for Apply
      - name: Notify Success
        if: ${{ success() && github.event.inputs.action == 'Terraform_apply' }}
        run: |
          aws sns publish --topic-arn ${{ secrets.SNS_TOPIC_ARN }} \
            --message "Terraform Apply succeeded for ${{ github.event.inputs.environment }} environment!" \
            --subject "Terraform Apply Success"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

  destroy:
    name: 'Terraform Destroy'
    runs-on: ubuntu-latest
    needs: plan

    steps:
      # Step 1: Destroy Terraform Resources
      - name: Terraform Destroy
        if: ${{ github.event.inputs.action == 'Terraform_destroy' }}
        run: terraform destroy -auto-approve

      # Step 2: Notify Success for Destroy
      - name: Notify Success
        if: ${{ success() && github.event.inputs.action == 'Terraform_destroy' }}
        run: |
          aws sns publish --topic-arn ${{ secrets.SNS_TOPIC_ARN }} \
            --message "Terraform Destroy succeeded for ${{ github.event.inputs.environment }} environment!" \
            --subject "Terraform Destroy Success"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
