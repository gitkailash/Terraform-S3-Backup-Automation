name: 'Terraform Workflow'

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy (staging or production)'
        required: true
        default: 'staging'
      action:
        description: 'Action to perform (Terraform_apply or Terraform_destroy)'
        required: true
        default: 'Terraform_apply'

permissions:
  contents: write

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

jobs:
  checkout:
    name: 'Checkout Repository'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

  init:
    name: 'Terraform Initialization'
    runs-on: ubuntu-latest
    needs: checkout

    steps:
      - name: Terraform Init
        run: terraform init

  validate:
    name: 'Terraform Validation'
    runs-on: ubuntu-latest
    needs: init

    steps:
      - name: Terraform Validate
        run: terraform validate

  plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    needs: validate

    steps:
      - name: Debug Repository Contents
        run: ls -alh

      - name: Terraform Plan
        run: terraform plan -out=plan-${{ github.event.inputs.environment }}.tfplan

  manual_approval:
    name: 'Manual Approval for Production'
    runs-on: ubuntu-latest
    needs: plan
    if: ${{ github.event.inputs.environment == 'production' }}

    steps:
      - name: Await Manual Approval
        uses: softprops/turnstyle@v1
        with:
          poll-interval-seconds: 30
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    needs: manual_approval
    if: ${{ github.event.inputs.action == 'Terraform_apply' }}

    steps:
      - name: Terraform Apply
        run: terraform apply -auto-approve plan-${{ github.event.inputs.environment }}.tfplan

  destroy:
    name: 'Terraform Destroy'
    runs-on: ubuntu-latest
    needs: manual_approval
    if: ${{ github.event.inputs.action == 'Terraform_destroy' }}

    steps:
      - name: Terraform Destroy
        run: terraform destroy -auto-approve

  notify_success:
    name: 'Notify Success'
    runs-on: ubuntu-latest
    needs: apply
    if: success()

    steps:
      - name: Notify Success via SNS
        run: |
          aws sns publish --topic-arn ${{ secrets.SNS_TOPIC_ARN }} \
            --message "Terraform Apply succeeded for ${{ github.event.inputs.environment }} environment!" \
            --subject "Terraform Apply Success"
